;(function(factory) {
  if (typeof define === "function" && define.amd) {
    define([], factory);
  } else if (typeof exports === "object") {
    module.exports = factory();
  } else {
    window.MobileMenu = factory();
  }
})(function() {
  
  MobileMenu = (function() {
    return function(selector, options) {
      let _ = this,
        assign = function(inserted, obj) {
          for (let key in inserted) {
            if (obj[key] === undefined) {
              obj[key] = inserted[key];
            } else if (typeof obj[key] === 'object') {
              assign(inserted[key], obj[key]);
            }
          }
        };
    
      _.options = options || {}
      _.selector = selector;
    
      _.defaults = {
        menuClass: 'active',
        overlayClass: 'active',
        openButtonClass: 'active',
        fakeScrollbarClass: 'active',
        bodyClass: 'no-scroll',
        allowPageScroll: false,
        overlayClick: true,
        escToClose: true,
        toRight: false,
        toLeft: false,
        fixHeader: '',
        fixHeaderClass: 'fixed',
        fixHeaderThreshold: 0,
        // toTop: false,
        // toBottom: false,
        fade: false,
        swipe: true,
        swipeThreshold: .3,
        fakeScrollbar: '#fake-scrollbar'
      }
    
      _.$menu = null;
      _.$openButton = null;
      _.$closeButtons = null;
      _.$overlay = null;
      _.$fakeScrollbar = null;
      _.$header = null;
      _.$headerClone = null;
      _.$headerParent = null;
      _.menuWidth = 0;
      _.menuHeight = 0;
      // _.menuScrollHeight = 0;
      _.opened = false;
      _.trfRegExp = /([-0-9.]+(?=px))/;
      _.trf = {
        property: 'transform',
        from: '',
        to: 'translate3d(0px, 0px, 0px)',
        timigFunction: 'ease',
        delay: 0,
        duration: .5
      }
      _.fade = {
        property: 'opacity',
        from: '0',
        to: '1',
        timigFunction: 'ease',
        delay: 0,
        duration: .5
      }
      _.swipeObject = {
        isSwipe: false,
        isScroll: false,
        posX1: 0,
        posX2: 0,
        posY1: 0,
        posY2: 0,
        posInitX: 0,
        posInitY: 0
      }
    
      _.openMenuHandler = {
        handleEvent: _.openMenu,
        ctx: _
      }
    
      _.closeMenuHandler = {
        handleEvent: _.closeMenu,
        ctx: _
      }
    
      _.transitionHandler = {
        handleEvent: _.transitionEnd,
        ctx: _
      }
    
      _.swipeStartHandler = {
        handleEvent: _.swipeStart,
        ctx: _
      }
    
      _.swipeActionHandler = {
        handleEvent: _.swipeAction,
        ctx: _
      }
    
      _.swipeEndHandler = {
        handleEvent: _.swipeEnd,
        ctx: _
      }
    
      _.fixHeaderHandler = {
        handleEvent: _.fixHeader,
        ctx: _
      }
    
      _.unfixHeaderHandler = {
        handleEvent: _.unfixHeader,
        ctx: _
      }
    
      assign(_.defaults, _.options);
    
      _.init();
    
      return _.$menu;
    }
  })();

  MobileMenu.prototype.init = function() {

    let _ = this,

      options = _.options,

      openButton = options.openButton,

      closeButtons = options.closeButtons,

      overlay = options.overlay,

      fixHeader = options.fixHeader,

      property,

      q = function(selector, element) {

        element = element || document.body;
        return element.querySelector(selector);

      };

  

    _.$menu = q(_.selector);

    openButton && (_.$openButton = q(openButton));

    closeButtons && (_.$closeButtons = document.querySelectorAll(closeButtons));

    overlay && (_.$overlay = q(overlay));

    !options.allowPageScroll && (_.$fakeScrollbar = q(options.fakeScrollbar));

    fixHeader && (_.$fixHeader = q(fixHeader));

  

    let menu = _.$menu;

  

    overlay = _.$overlay;

    fixHeader = _.$fixHeader;

  

    if (options.fade) {

      property = _.fade;

      options.swipe = false;

    } else {

      if (!options.toRight && !options.toLeft/* && !options.toTop && !options.toBottom*/) {

        options.toLeft = true;

      }

      let translateX = (options.toRight) ? '-100%' : (options.toLeft) ? '100%' : '0px';

        // translateY = (options.toBottom) ? '-100%' : (options.toTop) ? '100%' : '0px';

  

      // _.trf.from = 'translate3d(' + translateX + ', ' + translateY + ', 0px)';

      _.trf.from = 'translate3d(' + translateX + ', 0px, 0px)';

  

      property = _.trf;

  

    }

  

    if (overlay) {

      overlay.style.cssText = 'transition:opacity .5s;opacity:0';

    }

  

    menu.style.cssText = 'transition:' + property.property + ' ' + property.duration + 's ' + property.delay + 's ' + property.timigFunction + ';' + property.property + ':' + property.from;

  

    if (menu.style.display === 'none') {

      menu.style.display = '';

      // _.$menuWidth = menu.offsetWidth;

      // _.$menuHeight = menu.offsetHeight;

    }

  

    if (fixHeader) {

      _.$headerClone = fixHeader.cloneNode(true);

      _.$headerParent = fixHeader.parentElement;

      _.options.fixHeaderThreshold = fixHeader.getBoundingClientRect().bottom + pageYOffset;

  

      _.$headerClone.style.opacity = 0;

      _.$headerClone.style.pointerEvents = 'none';

      

      _.fixHeader();

    }

  

    _.initEvents();

    _.$menu.openMenu = _.openMenu;

    _.$menu.closeMenu = _.closeMenu;

    _.$menu.ctx = _;

    _.dispatchEvent(menu, 'menuinit');

  

  };
  MobileMenu.prototype.initEvents = function() {
    let _ = this,
      options = _.options,
      menu = _.$menu,
      openButton = _.$openButton,
      closeButtons = _.$closeButtons,
      overlay = _.$overlay,
      // создадим пассивного слушателя, если он поддерживается ios 9+ и т.п.
      passive = !Array.of ? false : {passive: true};
  
    openButton.addEventListener('click', _.openMenuHandler);
  
    for (let i = 0; i < closeButtons.length; i++) {
      closeButtons[i].addEventListener('click', _.closeMenuHandler);
    }
  
    menu.addEventListener('transitionend', _.transitionHandler);
  
    if (options.swipe && !options.fade) {
      menu.addEventListener('touchstart', _.swipeStartHandler, passive);
    }
  
    if (options.escToClose) {
      document.addEventListener('keyup', _.closeMenuHandler);
    }
  
    if (overlay && options.overlayClick) {
      overlay.addEventListener('click', _.closeMenuHandler);
    }
  
    if (_.$fixHeader) {
      window.addEventListener('scroll', _.fixHeaderHandler, passive);
    }
  
  };
  MobileMenu.prototype.openMenu = function(swipe) {
    let _ = this.ctx || this,
      options = _.options,
      menu = _.$menu,
      openButton = _.$openButton,
      closeButton = _.$closeButton,
      overlay = _.$overlay,
      fakeScrollbar = _.$fakeScrollbar,
      body = document.body,
      property;
  
    if (!_.opened) {
      if (swipe !== true) {
        _.dispatchEvent(menu, 'menubeforeopen');
      }
  
      if (event && event.type === 'click') {
        _.$caller = menu.caller = event.target;
      }
  
      if (overlay) {
        overlay.classList.add(options.overlayClass);
      }
  
      openButton.classList.add(options.openButtonClass);
      
      menu.classList.add(options.menuClass);
  
      if (fakeScrollbar) {
        fakeScrollbar.classList.add(options.fakeScrollbarClass);
        body.classList.add(options.bodyClass);
        body.style.paddingRight = fakeScrollbar.offsetWidth - fakeScrollbar.clientWidth + 'px';
      }
      _.menuWidth = menu.offsetWidth;
      _.menuHeight = menu.offsetHeight;
      // if ((options.toBottom || options.toTop) && _.menuScrollHeight === 0) {
      //   _.menuScrollHeight = menu.scrollHeight;
      // }
      if (swipe !== true) {
        menu.scrollTop = 0;
      }
  
      if (options.fade) {
        property = _.fade;
      } else {
        property = _.trf;
      }
  
      // menu.style[property.property] = property.to;
      menu.style.cssText = 'transition:' + property.property + ' ' + property.duration + 's ' + property.delay + 's ' + property.timigFunction + ';' + property.property + ':' + property.to;
  
      if (overlay) {
        overlay.style.opacity = 1;
      }
  
    }
  
  };
  MobileMenu.prototype.closeMenu = function(swipe) {
    if (event && event.type === 'keyup' && event.keyCode !== 27) {
      return;
    }
    let _ = this.ctx || this,
      options = _.options,
      menu = _.$menu,
      openButton = _.$openButton,
      closeButton = _.$closeButton,
      overlay = _.$overlay,
      property;
  
    if (_.opened) {
  
      if (!swipe) {
        _.dispatchEvent(menu, 'menubeforeclose');
      }
  
      openButton.classList.remove(options.openButtonClass);
  
      if (options.fade) {
        property = _.fade;
      } else {
        property = _.trf;
      }
      menu.style.cssText = 'transition:' + property.property + ' ' + property.duration + 's ' + property.delay + 's ' + property.timigFunction + ';' + property.property + ':' + property.from;
  
      if (overlay) {
        overlay.style.opacity = 0;
      }
  
    }
  
  };
  MobileMenu.prototype.swipeStart = function() {
    let _ = this.ctx || this,
      options = _.options,
      menu = _.$menu,
      swipe = _.swipeObject,
      evt = event.touches[0] || window.event.touches[0];
  
    swipe.isSwipe = swipe.isScroll = false;
    swipe.posInitX = swipe.posX1 = evt.clientX;
    swipe.posInitY = swipe.posY1 = evt.clientY;
  
    menu.addEventListener('touchend', _.swipeEndHandler);
    menu.addEventListener('touchmove', _.swipeActionHandler);
    menu.style.transition = '';
  };
  
  MobileMenu.prototype.swipeAction = function() {
    let _ = this.ctx || this,
      options = _.options,
      menu = _.$menu,
      swipe = _.swipeObject,
      evt = event.touches[0] || window.event.touches[0],
      style = menu.style.transform,
      transform = +style.match(_.trfRegExp)[0];
      // transform = style.match(_.trfRegExp);
  
    swipe.posX2 = swipe.posX1 - evt.clientX;
    swipe.posX1 = evt.clientX;
  
    swipe.posY2 = swipe.posY1 - evt.clientY;
    swipe.posY1 = evt.clientY;
  
    if (!swipe.isSwipe && !swipe.isScroll) {
      let posY = Math.abs(swipe.posY2),
        posX = Math.abs(swipe.posX2);
  
      if (posY > 7 || swipe.posX2 === 0) {
        swipe.isScroll = true;
        // 
      } else if (posY < 7) {
        swipe.isSwipe = true;
        // 
      }
    }
  
    if (swipe.isSwipe) {
      if (options.toLeft && swipe.posInitX > swipe.posX1) {
        menu.style.transform = _.trf.to;
        return;
      } else if (options.toRight && swipe.posInitX < swipe.posX1) {
        menu.style.transform = _.trf.to;
        return;
      }
      menu.style.transform = 'translate3d(' + (transform - swipe.posX2) + 'px, 0px, 0px)';
    }
  
  };
  
  MobileMenu.prototype.swipeEnd = function() {
    let _ = this.ctx || this,
      options = _.options,
      menu = _.$menu,
      swipe = _.swipeObject,
      property = _.trf;
  
    swipe.posFinal = swipe.posInitX - swipe.posX1;
  
    let absPosFinal = Math.abs(swipe.posFinal);
  
    // 
  
    if (absPosFinal > 1 && swipe.isSwipe) {
      if (options.toLeft && swipe.posFinal < 0 || options.toRight && swipe.posFinal > 0) {
        if (absPosFinal >= _.menuWidth * options.swipeThreshold) {
          _.closeMenu(true);
        } else {
          _.opened = false;
          _.openMenu(true);
        }
      }
    }
  
    
  
    menu.removeEventListener('touchend', _.swipeEndHandler);
    menu.removeEventListener('touchmove', _.swipeActionHandler);
  
  };
  
  MobileMenu.prototype.transitionEnd = function() {
    let _ = this.ctx || this,
      options = _.options,
      menu = _.$menu,
      openButton = _.$openButton,
      closeButton = _.$closeButton,
      overlay = _.$overlay;
  
    if (_.opened) {
      _.opened = false;
      menu.classList.remove(options.menuClass);
  
      if (overlay) {
        overlay.classList.remove(options.overlayClass);
      }
  
      _.allowPageScroll();
      _.dispatchEvent(menu, 'menuclose');
    } else {
      _.opened = true;
      _.dispatchEvent(menu, 'menuopen');
    }
  
  };
  MobileMenu.prototype.dispatchEvent = function(element, eventName) {
    if (typeof window.CustomEvent === "function") {
      let evt = new CustomEvent(eventName);
      element.dispatchEvent(evt);
    }
  };
  MobileMenu.prototype.allowPageScroll = function() {
    let _ = this.ctx || this,
      options = _.options,
      fakeScrollbar = _.$fakeScrollbar,
      body = document.body;
  
    if (fakeScrollbar) {
      // 
      body.style.paddingRight = '';
      fakeScrollbar.classList.remove(options.fakeScrollbarClass);
      body.classList.remove(options.bodyClass);
    }
  };
  MobileMenu.prototype.fixHeader = function() {
    let _ = this.ctx || this,
      options = _.options;
  
  
    if (!_.opened && (!_.$fixHeader.classList.contains(options.fixHeaderClass) && pageYOffset > options.fixHeaderThreshold)) {
      _.$headerParent.appendChild(_.$headerParent.replaceChild(_.$headerClone, _.$fixHeader));
      _.$fixHeader.classList.add(options.fixHeaderClass);
  
      window.removeEventListener('scroll', _.fixHeaderHandler);
      window.addEventListener('scroll', _.unfixHeaderHandler);
      
      _.dispatchEvent(_.$fixHeader, 'headerfixed');
    }
  };
  MobileMenu.prototype.unfixHeader = function() {
    let _ = this.ctx || this,
      options = _.options;
      
    if (_.$fixHeader.classList.contains(options.fixHeaderClass) && pageYOffset <= options.fixHeaderThreshold) {
      _.$headerParent.replaceChild(_.$fixHeader, _.$headerClone);
      _.$fixHeader.classList.remove(options.fixHeaderClass);
    
      window.removeEventListener('scroll', _.unfixHeaderHandler);
      window.addEventListener('scroll', _.fixHeaderHandler);
      _.dispatchEvent(_.$fixHeader, 'headerunfixed');
    }
  };

  return MobileMenu;
});